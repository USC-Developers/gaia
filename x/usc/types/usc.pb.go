// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gaia/usc/v1beta1/usc.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the x/usc module.
type Params struct {
	// redeem_dur defines USC -> collateral redeem duration (how long does it takes to convert).
	RedeemDur time.Duration `protobuf:"bytes,1,opt,name=redeem_dur,json=redeemDur,proto3,stdduration" json:"redeem_dur" yaml:"redeem_dur"`
	// collateral_denoms defines a set of collateral coin denoms that are supported by the module.
	CollateralDenoms []string `protobuf:"bytes,2,rep,name=collateral_denoms,json=collateralDenoms,proto3" json:"collateral_denoms,omitempty" yaml:"collateral_denoms"`
	// usc_denom defines the USC coin denom.
	UscDenom string `protobuf:"bytes,3,opt,name=usc_denom,json=uscDenom,proto3" json:"usc_denom,omitempty" yaml:"usc_denom"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8575b09df2fdc43e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "gaia.usc.v1beta1.Params")
}

func init() { proto.RegisterFile("gaia/usc/v1beta1/usc.proto", fileDescriptor_8575b09df2fdc43e) }

var fileDescriptor_8575b09df2fdc43e = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x3f, 0x4f, 0xc2, 0x40,
	0x18, 0xc6, 0x7b, 0x92, 0x10, 0x5a, 0x17, 0x68, 0x18, 0x2a, 0x89, 0xd7, 0xa6, 0x13, 0x31, 0xb1,
	0x17, 0x74, 0x63, 0xac, 0x1d, 0x5c, 0x4c, 0x0c, 0xc6, 0x98, 0xb8, 0x90, 0x6b, 0x7b, 0x56, 0x92,
	0x2b, 0x47, 0xee, 0x0f, 0x91, 0x6f, 0xe1, 0xc8, 0xc8, 0xc7, 0x61, 0x64, 0x74, 0x42, 0x85, 0xc5,
	0xc5, 0x85, 0x4f, 0x60, 0x7a, 0x87, 0x32, 0xb8, 0xbd, 0xef, 0xf3, 0x3c, 0xbf, 0x67, 0x78, 0x5f,
	0xa7, 0x53, 0xe0, 0x11, 0x46, 0x4a, 0x64, 0x68, 0xda, 0x4b, 0x89, 0xc4, 0xbd, 0x6a, 0x8e, 0x26,
	0x9c, 0x49, 0xe6, 0x36, 0x2b, 0x2f, 0xaa, 0xf6, 0xbd, 0xd7, 0x69, 0x17, 0xac, 0x60, 0xda, 0x44,
	0xd5, 0x64, 0x72, 0x1d, 0x58, 0x30, 0x56, 0x50, 0x82, 0xf4, 0x96, 0xaa, 0x27, 0x94, 0x2b, 0x8e,
	0xe5, 0x88, 0x8d, 0x8d, 0x1f, 0x7e, 0x03, 0xa7, 0x7e, 0x8b, 0x39, 0x2e, 0x85, 0xfb, 0xe0, 0x38,
	0x9c, 0xe4, 0x84, 0x94, 0xc3, 0x5c, 0x71, 0x0f, 0x04, 0xa0, 0x7b, 0x7c, 0x71, 0x12, 0x19, 0x3e,
	0xfa, 0xe5, 0xa3, 0x64, 0xcf, 0xc7, 0xa7, 0xcb, 0xb5, 0x6f, 0xed, 0xd6, 0x7e, 0x6b, 0x86, 0x4b,
	0xda, 0x0f, 0x0f, 0x68, 0x38, 0x7f, 0xf7, 0xc1, 0xc0, 0x36, 0x42, 0xa2, 0xb8, 0x7b, 0xe3, 0xb4,
	0x32, 0x46, 0x29, 0x96, 0x84, 0x63, 0x3a, 0xcc, 0xc9, 0x98, 0x95, 0xc2, 0x3b, 0x0a, 0x6a, 0x5d,
	0x3b, 0x0e, 0xf6, 0x25, 0x9e, 0x29, 0xf9, 0x17, 0x0b, 0x07, 0xcd, 0x83, 0x96, 0x68, 0xc9, 0xed,
	0x39, 0xb6, 0x12, 0x99, 0x09, 0x78, 0xb5, 0x00, 0x74, 0xed, 0xb8, 0xbd, 0x5b, 0xfb, 0x4d, 0x53,
	0xf1, 0x67, 0x85, 0x83, 0x86, 0x12, 0x99, 0x66, 0xfa, 0x8d, 0xf9, 0xc2, 0xb7, 0xbe, 0x16, 0x3e,
	0x88, 0xaf, 0x97, 0x9f, 0xd0, 0x5a, 0x6e, 0x20, 0x58, 0x6d, 0x20, 0xf8, 0xd8, 0x40, 0xf0, 0xba,
	0x85, 0xd6, 0x6a, 0x0b, 0xad, 0xb7, 0x2d, 0xb4, 0x1e, 0xcf, 0x8a, 0x91, 0x7c, 0x56, 0x69, 0x94,
	0xb1, 0x12, 0xdd, 0xdf, 0x5d, 0x9d, 0x27, 0x64, 0x4a, 0x28, 0x9b, 0x10, 0x2e, 0x90, 0xfe, 0xc5,
	0x8b, 0xfe, 0x86, 0x9c, 0x4d, 0x88, 0x48, 0xeb, 0xfa, 0x24, 0x97, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd6, 0xaf, 0xb5, 0xca, 0xa6, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RedeemDur != that1.RedeemDur {
		return false
	}
	if len(this.CollateralDenoms) != len(that1.CollateralDenoms) {
		return false
	}
	for i := range this.CollateralDenoms {
		if this.CollateralDenoms[i] != that1.CollateralDenoms[i] {
			return false
		}
	}
	if this.UscDenom != that1.UscDenom {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UscDenom) > 0 {
		i -= len(m.UscDenom)
		copy(dAtA[i:], m.UscDenom)
		i = encodeVarintUsc(dAtA, i, uint64(len(m.UscDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollateralDenoms) > 0 {
		for iNdEx := len(m.CollateralDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CollateralDenoms[iNdEx])
			copy(dAtA[i:], m.CollateralDenoms[iNdEx])
			i = encodeVarintUsc(dAtA, i, uint64(len(m.CollateralDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RedeemDur, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.RedeemDur):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintUsc(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintUsc(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RedeemDur)
	n += 1 + l + sovUsc(uint64(l))
	if len(m.CollateralDenoms) > 0 {
		for _, s := range m.CollateralDenoms {
			l = len(s)
			n += 1 + l + sovUsc(uint64(l))
		}
	}
	l = len(m.UscDenom)
	if l > 0 {
		n += 1 + l + sovUsc(uint64(l))
	}
	return n
}

func sovUsc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsc(x uint64) (n int) {
	return sovUsc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemDur", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RedeemDur, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenoms = append(m.CollateralDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UscDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UscDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsc = fmt.Errorf("proto: unexpected end of group")
)
